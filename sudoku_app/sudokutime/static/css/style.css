:root {
    --grid-width: min(50vh, 90vw);
    --pad-width: calc(var(--grid-width)/2 - 1.5em);
    --border-thickness: calc(var(--grid-width)/300);
    --grid-text: calc(var(--grid-width)/30 * 2);
    --primary: rgb(166, 166, 221);
    --secondary: rgb(93, 93, 126);
    --shadow: rgba(0, 0, 0, .4);
    --cell-shadow: calc(3 * var(--border-thickness));
    --svg-size: calc(1.5 * var(--grid-text));
    --footer-button-size: calc(var(--grid-width)/6);
}

* {
    font-family: sans-serif;
    color: black;
    touch-action: manipulation;
}

html {
    background: black;
}

body {
    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
    background: black;
    font-size: var(--grid-text);
}

/* Main rules */

    main {
        box-sizing: border-box;
        padding: 1em 0;
        min-height: calc(var(--vh, 1vh) * 90);    
        width: 100%;
        background: var(--secondary);
    }

    /* Grid rules */
    
        .grid, .box, .cell {
            border: var(--border-thickness) solid black;
        }

        .grid {
            position: relative;
            width: var(--grid-width);
            height: var(--grid-width);
            display: grid;
            grid-template: repeat(3, 1fr) / repeat(3, 1fr);
            margin: 0 auto;
            background: black;
        }

        .box {
            display: grid;
            grid-template: repeat(3, 1fr) / repeat(3, 1fr);
        }
        
        .cell {
            cursor: pointer;
            font-weight: bolder;
            padding: 0;
            background: #FFF;
            box-shadow: none;
            position: relative;
            transition: background-color .2s linear,
                        box-shadow .1s ease-out;
        }

        .cell::before {
            content: attr(data-pencil);
            position: absolute;
            top: 5%;
            left: 5%;
            font-size: .5em;
        }

        .cell.given {
            color: var(--secondary);
            cursor: default; 
        }

        @media (hover:hover){
            .cell:not(.given):hover {
                background: var(--secondary);
            }
        }

        .cell-active {
            box-shadow: inset 0 0 0 var(--cell-shadow) var(--primary);
        }
        .cell:focus-visible {
            outline: none;
        }


    /* Control rules */

        .controls {
            font-size: var(--grid-text);
            display: flex;
            justify-content: space-evenly;
            width: var(--grid-width);
            margin: 1em auto;
            background: white;
            padding: 1em 0;
            box-shadow: 0 0 20px 3px var(--shadow);
        }

        .number-pad, .input-type {
            display: grid;
            width: var(--pad-width);
            height: var(--pad-width);
            font-size: var(--grid-text);
        }

        .number-pad {
            grid-template: repeat(3, 1fr) / repeat(3, 1fr);
            grid-gap: .5em;
        }

        .input-type {
            grid-template: repeat(2, 1fr) / repeat(2, 1fr);
            grid-gap: .5em;
        }

        .controls button {
            outline: none;
            border: solid black .04em;
            cursor: pointer;
        }

        .number {
            background: var(--primary);
            box-shadow: 0 0 .25em .04em var(--shadow),
                        0 0 0 0 transparent inset;
            font-weight: bolder;
            padding: 0;
            transition: box-shadow .05s ease-out,
                        background-color .2s linear;
        }

        .number:active {
            background: var(--secondary);
            box-shadow: 0 0 0 0 transparent,
                        inset 0 0 0 var(--cell-shadow) black;
        }

        @media (hover: hover){
            .number:hover {
                background: var(--secondary);
            }
        }

        .input-type button{
            background: black;
            color: white;
            padding: 0;
            box-shadow: 0 0 .2em .05em var(--shadow),
                        0 0 0 transparent inset;
        }

        .undo, .redo {
            font-size: 200%;
            text-align: center;
            padding: 0;
            font-family: "SymbolaRegular";
            transition: box-shadow .05s ease-out,
                        border-color .05s ease-out,
                        background-color .2s linear;
        }

        .undo {
            transform: rotate(-90deg);
        }

        .redo {
            transform: rotate(90deg);
        }

        .answer, .pencil-mark {
            transition: box-shadow .1s ease-out,
                        border-color .1s ease-out,
                        background-color .2s linear;
        }

        .answer {
            font-size: 1.5em;
        }

        .pencil-mark {
            position: relative;
        }

        .pencil-mark::before {
            position: absolute;
            top: 7%;
            left: 7%;
            content: '123';
            font-size: .75em;
        }

        .answer.active, .pencil-mark.active, .undo:active, .redo:active {
            box-shadow: 0 0 .2em .05em transparent,
                        inset 0 0 0 var(--cell-shadow) var(--primary);
            cursor: default !important;
            border-color: var(--primary) !important;
        }
        @media (hover:hover){
            .answer:not(.active):hover, .pencil-mark:not(.active):hover, .undo:hover, .redo:hover {
                background: var(--secondary);
            }
        }

/* Footer rules */

    footer {
        box-sizing: border-box;
        background: black;
        height: calc(var(--vh, 1vh) * 9);    
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 1.5em;
        padding: 0 1em;
    }

    footer>* {
        background: black;
        color: white;
        outline: none;
        border: none;
        cursor: pointer;
        width: var(--footer-button-size);
        height: 1.2em;
        text-align: center;
        align-items: center;
        padding: 0;
        margin: 0;
        transition: all .2s linear;
    }
    @media (hover: hover){
        footer>*:hover {
            background: var(--secondary);
            border-radius: 5%;
        }
    }

    .restart {
        font-family: "SymbolaRegular";
        display: grid;
        place-items: center;
    }

    .svg-container {
        display: grid;
        place-items: center;
    }

    .new {
        height: var(--svg-size);
        width: var(--svg-size);
        font-size: var(--svg-size);
    }

/* Modal rules */

    .grid-message {
        box-sizing: border-box;
        position: absolute;
        width: 100%;
        height: 100%;
        visibility: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: white;
        color: black;
        z-index: 10;
        padding: 1em;
        cursor: pointer;
    }
    .grid-message h1 { font-size: .85em; }
    .grid-message p { 
        font-size: .75em; 
        margin: .5em 0;
    }
    .grid-message ul { 
        padding: 0; 
        margin: .5em 0;
    }
    .grid-message li {
        font-size: .6em;
        list-style: none;
        margin: .5em;
    }
    .grid-message div {
        width: 85%;
    }

    .keycap {
        display: inline-block;
        background: black;
        border: .175em solid gray;
        color: white;
        padding: .75em;
    }

    .grid-message .load {
        height: 2em;
        width: 2em;
        border-radius: 5000%;
        border: .2em solid black;
        position: relative;
        background: var(--secondary);
    }

    .load::after {
        position: absolute;
        background: var(--primary);
        height: 100%;
        width: 50%;
        top: 0;
        left: 0;
        content: '';
        border-radius: 1000px 0 0 1000px;
        animation: 2s ease-in-out infinite spin;
        transform-origin: right;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        50% {
            transform: rotate(180deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }